package vistas;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import entities.Membresia;
import entities.Socio;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import persistence.MembresiaData;
import persistence.SocioData;

/**
 *
 * @author SANTIAGO
 */
public class GestionMembresia extends javax.swing.JInternalFrame {

    private DefaultTableModel model = new DefaultTableModel();
    private MembresiaData membresiaData = new MembresiaData();

    public GestionMembresia() {
        initComponents();
        jBRenovar.setEnabled(false);
        jBEliminar.setEnabled(false);
        agregarColumnasATable();
        rellenarFilas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jCPases = new javax.swing.JComboBox<>();
        jREstado = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jBSalir = new javax.swing.JButton();
        jBBuscarMem = new javax.swing.JButton();
        jBBuscarIdSocio = new javax.swing.JButton();
        jTIdmembresia = new javax.swing.JTextField();
        jTIdsocio = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jBNuevo = new javax.swing.JButton();
        jBRenovar = new javax.swing.JButton();
        jBEliminar = new javax.swing.JButton();
        jBCrear = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLCosto = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLFecha = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();

        jButton1.setText("jButton1");

        jLabel1.setText("Membresia:");

        jLabel2.setText("Id Socio:");

        jLabel3.setText("Pases:");

        jLabel4.setText("Costo:");

        jLabel5.setText("Estado:");

        jCPases.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8", "12", "20", "I" }));
        jCPases.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCPasesActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jBSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logout.png"))); // NOI18N
        jBSalir.setText(" Salir");
        jBSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalirActionPerformed(evt);
            }
        });

        jBBuscarMem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        jBBuscarMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarMemActionPerformed(evt);
            }
        });

        jBBuscarIdSocio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        jBBuscarIdSocio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarIdSocioActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setText("MEMBRES√çA");

        jBNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new.png"))); // NOI18N
        jBNuevo.setText("Nuevo");
        jBNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNuevoActionPerformed(evt);
            }
        });

        jBRenovar.setText("Renovar");
        jBRenovar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRenovarActionPerformed(evt);
            }
        });

        jBEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        jBEliminar.setText("Eliminar");
        jBEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEliminarActionPerformed(evt);
            }
        });

        jBCrear.setText("Crear");
        jBCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCrearActionPerformed(evt);
            }
        });

        jLCosto.setText("Precio");

        jLabel8.setText("Vencimiento:");

        jLFecha.setText("Fecha");

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gym.png"))); // NOI18N
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(18, 18, 18)
                                    .addComponent(jTIdmembresia, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jBBuscarMem, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2)
                                    .addGap(41, 41, 41)
                                    .addComponent(jTIdsocio, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jBBuscarIdSocio, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(jCPases, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(144, 144, 144)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel8)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addGap(33, 33, 33)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel6)
                                                .addComponent(jLCosto))))
                                    .addGap(0, 0, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jREstado)
                                .addGap(441, 441, 441)))
                        .addGap(201, 201, 201)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(51, 51, 51))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jBSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jBNuevo)
                                        .addGap(18, 18, 18)
                                        .addComponent(jBEliminar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jBRenovar)
                                        .addGap(34, 34, 34)
                                        .addComponent(jBCrear)))
                                .addGap(70, 70, 70)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel9)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel7)
                        .addGap(152, 152, 152))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTIdsocio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBBuscarIdSocio, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBBuscarMem, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(jTIdmembresia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLCosto)
                            .addComponent(jLabel3)
                            .addComponent(jCPases, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jREstado)
                            .addComponent(jLabel5)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8)
                                .addComponent(jLFecha)))))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBRenovar)
                        .addComponent(jBCrear))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBNuevo)
                        .addComponent(jBEliminar)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(jBSalir)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //-----------Metodo para buscar membresia ---------------------------------
    private void jBBuscarMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarMemActionPerformed
        if (jTIdmembresia.getText().matches("\\d+")) {
            try {
                int id = Integer.parseInt(jTIdmembresia.getText());
                Membresia membresia = membresiaData.buscarMembresia(id);

                if (membresia != null) {
                    LocalDate fechaFin = membresia.getFechaFin();
                    LocalDate fechaActual = LocalDate.now();
                    String ids = String.valueOf(membresia.getSocio().getIdSocio());
                    jBEliminar.setEnabled(true);
                    int pases = membresia.getCantPases();
                    jLFecha.setText(fechaFin.toString());
                    jTIdsocio.setText(ids);
                    if (fechaFin.isBefore(fechaActual)) {
                        JOptionPane.showMessageDialog(this, "La fecha de pago ya venci√≥, hay que renovar membres√≠a.");
                        jBRenovar.setEnabled(true);
                    } else if (pases == 0) {
                        JOptionPane.showMessageDialog(this, "Pases agotados hay que renovar membresia");
                        jBRenovar.setEnabled(true);

                    } else {

                        jTIdsocio.setText(ids);
                        jREstado.setSelected(membresia.getEstado() == 1);
                        // Setear la fecha fin en el campo jLFecha
                        jLFecha.setText(fechaFin.toString());
                        // Obtener la cantidad de pases de la membres√≠a
                        int canPases = membresia.getCantPases();

                        // Seleccionar autom√°ticamente la opci√≥n correspondiente en el combobox jCPases
                        switch (canPases) {
                            case 8:
                                jCPases.setSelectedIndex(0);
                                jLCosto.setText("$8.000");
                                break;
                            case 12:
                                jCPases.setSelectedIndex(1);
                                jLCosto.setText("$10.000");
                                break;
                            case 20:
                                jCPases.setSelectedIndex(2);
                                jLCosto.setText("$12.000");
                                break;
                            default:
                                JOptionPane.showMessageDialog(this, "Otro caso de cantidad de pases");
                                break;
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "La membres√≠a no existe");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Debe ingresar un n√∫mero entero v√°lido en el campo de ID membres√≠a");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe ingresar un n√∫mero entero en el campo de ID membres√≠a");
        }

    }//GEN-LAST:event_jBBuscarMemActionPerformed
    //----------Metodo para crear columnas--------------------------------------
    private void agregarColumnasATable() {

        model.addColumn("Id_Membresia");
        model.addColumn("Id_Socio");
        model.addColumn("Nombre");
        model.addColumn("Apellido");
        model.addColumn("FechaFin");
        model.addColumn("CanP");
        jTable1.setModel(model);
    }

    //-----------Metodo para rellenar las filas con todas las membresias--------
    private void rellenarFilas() {
        //  DefaultTableModel model = (DefaultTableModel) table.getModel();

        List<Membresia> listaMembresias = membresiaData.listarMembresia(); // Obtener la lista de membres√≠as

        for (Membresia membresia : listaMembresias) {
            Object[] data = {
                membresia.getIdMembresia(),
                membresia.getSocio().getIdSocio(),
                membresia.getSocio().getNombreSocio(),
                membresia.getSocio().getApellidoSocio(),
                membresia.getFechaFin(),
                membresia.getCantPases()
            };
            model.addRow(data);
        }
    }

    // Establecer el n√∫mero de filas en 0, eliminando todas las filas existentes
    public void limpiarTabla() {
        model.setRowCount(0);

    }

    //----------seteo de costo------------------------------------
    public void comboBox() {
        int indiceSeleccionado = jCPases.getSelectedIndex();
        double costo = 0.0;

        switch (indiceSeleccionado) {
            case 0:
                costo = 8000; // Costo para 8 pases
                break;
            case 1:
                costo = 10000; // Costo para 12 pases
                break;
            case 2:
                costo = 12000; // Costo para 20 pases
                break;
            default:
                costo = 0.0; // Costo por defecto si no hay selecci√≥n v√°lida
                break;
        }

        // Actualizar el texto de jLCosto con el costo calculado
        jLCosto.setText(String.valueOf(costo));

    }

    //-----------Metodo para crear una nueva Membresia------------
    //-----------Si no existe socio no se puede crear-------------
    private void jBCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCrearActionPerformed
        String idSocioText = jTIdsocio.getText().trim();

        if (!idSocioText.isEmpty()) {
            if (idSocioText.matches("\\d+")) {
                int idSocio = Integer.parseInt(idSocioText);
                SocioData socioData = new SocioData();
                Socio socio = socioData.buscarSocio(idSocio);

                if (socio != null) {
                    // Verificar si ya existe una membres√≠a asociada al socio
                    Membresia membresiaExistente = membresiaData.MembresiaxSocio(socio);

                    if (membresiaExistente == null) {
                        try {
                            double costo = Double.parseDouble(jLCosto.getText());
                            boolean estado = jREstado.isSelected();
                            if (estado) {
                                int cantidadPases = 0;
                                switch (jCPases.getSelectedIndex()) {
                                    case 0:
                                        cantidadPases = 8;
                                        break;
                                    case 1:
                                        cantidadPases = 12;
                                        break;
                                    case 2:
                                        cantidadPases = 20;
                                        break;
                                }

                                LocalDate fechaActual = LocalDate.now();
                                LocalDate fechaFutura = fechaActual.plusDays(30);

                                Membresia nuevaMembresia = new Membresia(1, socio, fechaActual, fechaFutura, cantidadPases, costo, estado ? 1 : 0);
                                membresiaData.agregarMembresia(nuevaMembresia);
                            } else {
                                JOptionPane.showMessageDialog(this, "El estado debe estar en true para poder crear una membrec√≠a.");
                            }
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(this, "Debe ingresar un valor num√©rico v√°lido para el costo.");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Ya existe una membres√≠a para el socio. No se puede crear una nueva membres√≠a.");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "El socio no existe. Debe crear uno para poder crear una membrec√≠a.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Debe ingresar un n√∫mero entero v√°lido en el campo de ID socio.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "El campo de ID socio no puede estar vac√≠o.");
        }
        limpiarTabla();
        rellenarFilas();
    }//GEN-LAST:event_jBCrearActionPerformed

    //---------Metodo que al precionar el conbo se sete costo--------
    private void jCPasesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCPasesActionPerformed
        comboBox();
    }//GEN-LAST:event_jCPasesActionPerformed
    //----------Metodo para buscar Membresia x idSocio---------------
    private void jBBuscarIdSocioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarIdSocioActionPerformed
        limpiarTabla();
        // Verificar si el campo de Id de Socio est√° vac√≠o
    if (jTIdsocio.getText().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Por favor, ingrese el Id de Socio");
        return;
    }
    
    Pattern pattern = Pattern.compile("\\d*");
    Matcher matcher = pattern.matcher(jTIdsocio.getText());
    if (matcher.matches()) {
        int idSocio = Integer.parseInt(jTIdsocio.getText());
        SocioData socioData = new SocioData();
        Socio socio = socioData.buscarSocio(idSocio);

        try {
            Membresia membresia = membresiaData.MembresiaxSocio(socio);

            Object[] data = {
                membresia.getIdMembresia(),
                membresia.getSocio().getIdSocio(),
                membresia.getSocio().getNombreSocio(),
                membresia.getSocio().getApellidoSocio(),
                membresia.getFechaFin(),
                membresia.getCantPases()
            };
            model.addRow(data);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "No se encontraron membresias para el Socio");
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, ingrese solo n√∫meros en el campo Id de Socio");
    

}

    }//GEN-LAST:event_jBBuscarIdSocioActionPerformed
//----------Metodo para que el boton Nuevo limpie campos----------
    private void jBNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNuevoActionPerformed
        limpiarCampos();
        jBEliminar.setEnabled(false);
        jBRenovar.setEnabled(false);
        limpiarTabla();
         rellenarFilas();
    }//GEN-LAST:event_jBNuevoActionPerformed
    //----------Metodo para eliminar una Membresia--------------------
    private void jBEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEliminarActionPerformed
        limpiarTabla();
        int id = Integer.parseInt(jTIdmembresia.getText());
        membresiaData.borrarMembresia(id);

        rellenarFilas();
       
    }//GEN-LAST:event_jBEliminarActionPerformed

    private void jBRenovarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRenovarActionPerformed

        int id = Integer.parseInt(jTIdmembresia.getText());
        Membresia membresia = membresiaData.buscarMembresia(id);
        Socio socio = membresia.getSocio();
        LocalDate fechaActual = LocalDate.now();
        LocalDate fechaFutura = fechaActual.plusDays(30);
        double costo = Double.parseDouble(jLCosto.getText());
        boolean estado = jREstado.isSelected();

        if (estado) {
            int cantidadPases = 0;
            switch (jCPases.getSelectedIndex()) {
                case 0:
                    cantidadPases = 8;
                    break;
                case 1:
                    cantidadPases = 12;
                    break;
                case 2:
                    cantidadPases = 20;
                    break;
            }
            Membresia nuevaMembresia = new Membresia(id, socio, fechaActual, fechaFutura, cantidadPases, costo, estado ? 1 : 0);
            membresiaData.actualizarMembresia(nuevaMembresia);
            JOptionPane.showMessageDialog(this, "Membresia Renovada Exitosamente.");
        }
        jBRenovar.setEnabled(false);
    }//GEN-LAST:event_jBRenovarActionPerformed

    private void jBSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalirActionPerformed
        dispose();
    }//GEN-LAST:event_jBSalirActionPerformed
    //-----------Limpieza de campos------------------------------------
    private void limpiarCampos() {
      
        jTIdmembresia.setText("");
        jTIdsocio.setText("");
        jLCosto.setText("");
        jREstado.setSelected(false);
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBuscarIdSocio;
    private javax.swing.JButton jBBuscarMem;
    private javax.swing.JButton jBCrear;
    private javax.swing.JButton jBEliminar;
    private javax.swing.JButton jBNuevo;
    private javax.swing.JButton jBRenovar;
    private javax.swing.JButton jBSalir;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jCPases;
    private javax.swing.JLabel jLCosto;
    private javax.swing.JLabel jLFecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JRadioButton jREstado;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTIdmembresia;
    private javax.swing.JTextField jTIdsocio;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
